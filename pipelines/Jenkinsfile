node('docker-slave') {
   withEnv([
        'SCM_REPOSITORY=git@github.com:offUgo/frontend-exercise.git',
        'SCM_CREDENTIALS=OFFUGO_CICD_SSH'
    ]) {

    withCredentials([
        sshUserPrivateKey(credentialsId: 'OFFUGO_CICD_SSH', keyFileVariable: 'SSH_KEY_FILE'),
        sshUserPrivateKey(credentialsId: 'OFFUGO_OPS_SSH', keyFileVariable: 'SSH_KEY_FILE_OPS'),
        usernamePassword(credentialsId: 'AZURE_CONTAINER_REGISTRY', usernameVariable: 'AZURE_CONTAINER_REGISTRY_USER', passwordVariable: 'AZURE_CONTAINER_REGISTRY_PASSWORD')
    ]) {

    stage('init') {
        env.IMAGE_BASE_NAME="${env.JOB_BASE_NAME.toLowerCase().replaceAll("\\.", "-")}-frontend-neo"
        env.IMAGE="${env.DOCKER_REGISTRY}/${env.IMAGE_BASE_NAME}:${env.BUILD_NUMBER}"
        env.IMAGE_REMOTE="${env.DOCKER_REGISTRY_REMOTE}/${env.IMAGE_BASE_NAME}:${env.BUILD_NUMBER}"
        env.PROJECT_KEY=env.JOB_NAME.toLowerCase().replaceAll("\\.", "-").replaceAll("\\s", "-").replaceAll("\\/", ".")
        env.PORT_MIN = 30000
        env.PORT_MAX = 40000
        env.IS_TAG_RELEASE = "false"

        sh '''
            printenv
        '''
    }
    stage('checkout') {
        checkout([
            $class: 'GitSCM',
            branches: [[name: 'master']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'CheckoutOption', timeout: 120],
                [$class: 'CloneOption',
                    depth: 0,
                    noTags: false,
                    reference: '/other/optional/local/reference/clone',
                    shallow: false,
                    timeout: 120]
            ],
            submoduleCfg: [],
            userRemoteConfigs: [
                [
                    credentialsId: env.SCM_CREDENTIALS,
                    url: env.SCM_REPOSITORY
                ]
            ]
        ])
        def WORKSPACE=pwd()
        env.GIT_COMMIT_MSG = sh (script: 'git log -1 --pretty=%B ${GIT_COMMIT}', returnStdout: true).trim()
    }
    stage('build') {
        sh(script: """
            docker build . \\
                --file pipelines/Build.Dockerfile \\
                --build-arg ENV_FILE=.env \\
                --tag $IMAGE_BASE_NAME-base:$BUILD_NUMBER
        """)
    }

    stage('login registry') {
        sh(script: """
            docker login $DOCKER_REGISTRY -u $AZURE_CONTAINER_REGISTRY_USER -p $AZURE_CONTAINER_REGISTRY_PASSWORD
        """)
    }

    stage('publish') {
        sh(script: """
            docker build . \\
                --file pipelines/Publish.dockerfile \\
                --build-arg BUILD_NUMBER=$BUILD_NUMBER \\
                --build-arg BASE=$IMAGE_BASE_NAME-base:$BUILD_NUMBER \\
                --tag $IMAGE

            docker push \\
                $IMAGE
        """)
    }
    stage('deploy') {
        PORT=57466
                  withEnv(["PROJECT_KEY=$PROJECT_KEY",
                           "PORT=$PORT"
                  ])
                  {
                      sh(script: """

                            mkdir -p ssh
                            cp '$SSH_KEY_FILE_OPS' ssh/key
                            docker build . \\
                                --file pipelines/Ssh.Dockerfile \\
                                --build-arg BASE=$IMAGE_BASE_NAME-base:$BUILD_NUMBER \\
                                --tag $IMAGE_BASE_NAME-ssh:$BUILD_NUMBER

                            cd pipelines
                            docker-compose \\
                                --host $PROD_01_DOCKER_URL \\
                                --project-name $PROJECT_KEY \\
                                    up \\
                                --build \\
                                --detach \\
                                --remove-orphans

                            # Ingress
                            docker run \\
                                --rm \\
                                $IMAGE_BASE_NAME-ssh:$BUILD_NUMBER \\
                                ash -c "./copy-ingress.sh $DOCKER_INGRESS_01 ./ingress.conf $INGRESSES/frontend.conf; ./copy-ingress.sh $DOCKER_INGRESS_01 ./.htpasswd $INGRESSES/.htpasswddev"
                      """)
                  }
    }
}
}
}



